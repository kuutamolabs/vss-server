buildscript {
  ext.protobufPlugInVersion = '0.9.4'
  ext.protobufVersion = '3.21.7'
  ext.jerseyVersion = '3.1.0'
  ext.junitVersion = '5.9.0'
  ext.mockitoVersion = '5.2.0'
  ext.postgresVersion = '42.5.1'
  ext.jooqVersion = '3.17.7'
  ext.guiceVersion = '5.1.0'
}

plugins {
  id 'java'
  id 'com.google.protobuf' version "${protobufPlugInVersion}"
  id 'war'
  id 'idea'
  id 'nu.studer.jooq' version '8.0'
}

repositories {
  mavenCentral()
}

idea {
  module {
    generatedSourceDirs.add(file("build/generated/proto/main"))
  }
}

group 'org.vss'
version '1.0'

dependencies {
  implementation "com.google.protobuf:protobuf-java:$protobufVersion"

  implementation('org.glassfish.jersey.containers:jersey-container-servlet:3.1.0')

  //jOOQ & Postgres impl deps
  implementation "org.jooq:jooq:$jooqVersion"
  implementation "org.jooq:jooq-meta:$jooqVersion"
  implementation "org.jooq:jooq-codegen:$jooqVersion"
  runtimeOnly "org.postgresql:postgresql:$postgresVersion"
  jooqGenerator "org.postgresql:postgresql:$postgresVersion"
  implementation 'com.zaxxer:HikariCP:5.0.1' // Connection pooling for postgres/jdbc

  implementation "com.google.inject:guice:$guiceVersion"
  implementation('org.glassfish.jersey.inject:jersey-hk2:3.1.0')
  implementation "org.glassfish.hk2:guice-bridge:3.0.3"

  compileOnly 'org.projectlombok:lombok:1.18.24'
  annotationProcessor 'org.projectlombok:lombok:1.18.24'

  testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
  testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
  testImplementation "org.mockito:mockito-core:$mockitoVersion"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
  testImplementation "org.hamcrest:hamcrest-library:2.2"
  testImplementation "org.testcontainers:junit-jupiter:1.17.6"
  testImplementation "org.testcontainers:postgresql:1.17.6"
}

test {
  useJUnitPlatform()
}

protobuf {
  protoc {
    artifact = "com.google.protobuf:protoc:$protobufVersion"
  }
}

jooq {
  configurations {
    main {
      generateSchemaSourceOnCompilation = true

      generationTool {
        jdbc {
          def db = System.getenv('DB_HOST')
          def password = System.getenv('DB_PASSWORD')

          driver = 'org.postgresql.Driver'
          url = "jdbc:postgresql://${db}:5432/postgres"
          user = 'postgres'
          password = "${password}"
          properties {
            property {
              key = 'ssl'
              value = 'false'
            }
          }
        }
        generator {
          name = 'org.jooq.codegen.DefaultGenerator'
          database {
            name = 'org.jooq.meta.postgres.PostgresDatabase'
            inputSchema = 'public'
          }
          generate {
            deprecated = false
            records = true
            immutablePojos = true
            fluentSetters = true
          }
          target {
            packageName = 'org.vss.postgres'
            directory = 'build/generated-src/jooq/main'
          }
          strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
        }
      }
    }
  }
}
